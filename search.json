[{"title":"Hello World","url":"/and.io/2024/12/26/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"加密文档（密码：yueplus）","url":"/and.io/2020/12/01/encrypt/","content":"\n      \n        a6753761d5da8533520375286757cb9ddd2e3524ed3c845799190abcf16d629e4067a51f2f561d189690b3b607ef63af5d5acd4fcdfb1a5b4939064d93b85b1d433d3a0f9f71b0098f29277483d455d9002c9c810db7653df401bd9f43803f0c6e2fceb319f543b7232239afcf151c34888f00d23b4b1f7cbc9e97ed206718cb1e81afcd82ea1de78535b60fdc78bddfaef29a057e9002b44b379543fdc8fb25fea6ea44b45572f612c57d44446edddb08d1443379cd8bc10011d6382aa7ac3ac4dfc86983671f3b389156180a5eb16ae270433dae0ef0ef05ad536dcfdf8598c4fcf4118992c79aabcb862263084863f9f9d4c91d2a23d3dbf74c356eef85afaabd1154366e20f163cee6808d993a467cf8e857c7cabb9329286351d480f4064210733a6627e50a31a5fc1fbb3ab9c9c036ee5bd933283cc75813e028010aec7010c67e29f9b96c0652abf8f66df7e4f8372322b0441994e5a8b4fefdba3117dd7070611aa920d695500f47d7ec334e2dde2ecaa91fa619322fc3f79c2e7fb268e6a290aca7674055feb20e831131fb70a777c51d72cdcbeb42579370413bfbde8c53274bfe542d3efb6d9da1e659b6d3cd735901163eb06bd6677ec17fde666825bd9d3e4b43c446912d2be0af48336d1b00d931a7de25677566a012465ff8c1e5d36e2d3956017aacb39427cc07f2e86fc598c71dd7b5a6805821b3d8621d44ee4f7e3ffd603351cf3ec3da95e22d21e0ec0cfea67d30fc00a2551c27ff47b2d2922bdaed40d8bc365f031339d51fdcee02eedeb146b5deecd2480608d043635b3ec0c212858ff28ddded53604badf95158323a27f6273ef044857af331e048a5e29a3e688c699ce3ed930041aed4cd7ce4ef7653e81eab8b3280ccfb3f2b3a41ed73632d8a25ef6bc8a44718bbafc63b5d1f89a0107cd4b8773b84aefc9ec27ed5b909f7cf4f8d7125be35b1beceae1d94b2799095c7e7c1f47c66e9fedbc4bb167678b61a85dc1fd53527465c069cb5d9da71402939db5e1db53f32af43\n      \n      \n        \n          \n          \n            Hey, password is required here.\n          \n        \n        \n      \n    \n    ","categories":["Example"],"tags":["encrypt"]},{"title":"Hello World !","url":"/and.io/2020/04/15/helloworld/","content":"JavaScriptconsole.log(&quot;Hello World&quot;);\n这儿有一些代码示例~\n\n\nApache# rewrite`s rules for wordpress pretty urlLoadModule rewrite_module  modules/mod_rewrite.soRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule . index.php [NC,L]ExpiresActive OnExpiresByType application/x-javascript  &quot;access plus 1 days&quot;Order Deny,AllowAllow from All&lt;Location /maps/&gt;  RewriteMap map txt:map.txt  RewriteMap lower int:tolower  RewriteCond %&#123;REQUEST_URI&#125; ^/([^/.]+)\\.html$ [NC]  RewriteCond $&#123;map:$&#123;lower:%1&#125;|NOT_FOUND&#125; !NOT_FOUND  RewriteRule .? /index.php?q=$&#123;map:$&#123;lower:%1&#125;&#125; [NC,L]&lt;/Location&gt;\n\nBash#!/bin/bash###### CONFIGACCEPTED_HOSTS=&quot;/root/.hag_accepted.conf&quot;BE_VERBOSE=falseif [ &quot;$UID&quot; -ne 0 ]then echo &quot;Superuser rights required&quot; exit 2figenApacheConf()&#123; echo -e &quot;# Host $&#123;HOME_DIR&#125;$1/$2 :&quot;&#125;echo &#x27;&quot;quoted&quot;&#x27; | tr -d \\&quot; &gt; text.txt\n\nCoffeeScriptgrade = (student, period=(if b? then 7 else 6)) -&gt;  if student.excellentWork    &quot;A+&quot;  else if student.okayStuff    if student.triedHard then &quot;B&quot; else &quot;B-&quot;  else    &quot;C&quot;class Animal extends Being  constructor: (@name) -&gt;  move: (meters) -&gt;    alert @name + &quot; moved #&#123;meters&#125;m.&quot;\n\nC++#include &lt;iostream&gt;int main(int argc, char *argv[]) &#123;  /* An annoying &quot;Hello World&quot; example */  for (auto i = 0; i &lt; 0xFFFF; i++)    cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl;  char c = &#x27;\\n&#x27;;  unordered_map &lt;string, vector&lt;string&gt; &gt; m;  m[&quot;key&quot;] = &quot;\\\\\\\\&quot;; // this is an error  return -2e3 + 12l;&#125;\n\nC#using System.IO.Compression;#pragma warning disable 414, 3021namespace MyApplication&#123;    [Obsolete(&quot;...&quot;)]    class Program : IInterface    &#123;        public static List&lt;int&gt; JustDoIt(int count)        &#123;            Console.WriteLine($&quot;Hello &#123;Name&#125;!&quot;);            return new List&lt;int&gt;(new int[] &#123; 1, 2, 3 &#125;)        &#125;    &#125;&#125;\n\nCSS@font-face &#123;  font-family: Chunkfive; src: url(&#x27;Chunkfive.otf&#x27;);&#125;body, .usertext &#123;  color: #F0F0F0; background: #600;  font-family: Chunkfive, sans;  --heading-1: 30px/32px Helvetica, sans-serif;&#125;@import url(print.css);@media print &#123;  a[href^=http]::after &#123;    content: attr(href)  &#125;&#125;\n\ndiffIndex: languages/ini.js===================================================================--- languages/ini.js    (revision 199)+++ languages/ini.js    (revision 200)@@ -1,8 +1,7 @@ hljs.LANGUAGES.ini = &#123;   case_insensitive: true,-  defaultMode:-  &#123;+  defaultMode: &#123;     contains: [&#x27;comment&#x27;, &#x27;title&#x27;, &#x27;setting&#x27;],     illegal: &#x27;[^\\\\s]&#x27;   &#125;,*** /path/to/original timestamp--- /path/to/new      timestamp****************** 1,3 ****--- 1,9 ----+ This is an important+ notice! It should+ therefore be located at+ the beginning of this+ document!! compress the size of the! changes.  It is important to spell\n\n\n使用主题：Atom One Dark Reasonable查看更多示例：Highlight.js demo\n\n","categories":["Example"],"tags":["code"]},{"title":"kotlin 基本类型","url":"/and.io/2020/07/14/kotlin-basic-types/","content":"基本类型在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调用成员函数与属性。一些类型可以有特殊的内部表示——例如，数字、字符以及布尔值可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。在本节中，我们会描述 Kotlin 中使用的基本类型：数字、字符、布尔值、数组与字符串。\n\n\n\n原文地址，此处仅作展示！\n\n基本类型在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调用成员函数与属性。一些类型可以有特殊的内部表示——例如，数字、字符以及布尔值可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。在本节中，我们会描述 Kotlin 中使用的基本类型：数字、字符、布尔值、数组与字符串。\n数字Kotlin 提供了一组表示数字的内置类型。对于整数，有四种不同大小的类型，因此值的范围也不同。\n\n\n\n类型\n大小（比特数）\n最小值\n最大值\n\n\n\nByte\n8\n-128\n127\n\n\nShort\n16\n-32768\n32767\n\n\nInt\n32\n-2,147,483,648 (-231)\n2,147,483,647 (231 - 1)\n\n\nLong\n64\n-9,223,372,036,854,775,808 (-263)\n9,223,372,036,854,775,807 (263 - 1)\n\n\n所有以未超出 Int 最大值的整型值初始化的变量都会推断为 Int 类型。如果初始值超过了其最大值，那么推断为 Long 类型。如需显式指定 Long 型值，请在该值后追加 L 后缀。\nval one = 1 // Intval threeBillion = 3000000000 // Longval oneLong = 1L // Longval oneByte: Byte = 1\n\n对于浮点数，Kotlin 提供了 Float 与 Double 类型。根据 IEEE 754 标准，两种浮点类型的十进制位数（即可以存储多少位十进制数）不同。Float 反映了 IEEE 754 单精度，而 Double 提供了双精度。\n\n\n\n类型\n大小（比特数）\n有效数字比特数\n指数比特数\n十进制位数\n\n\n\nFloat\n32\n24\n8\n6-7\n\n\nDouble\n64\n53\n11\n15-16\n\n\n对于以小数初始化的变量，编译器会推断为 Double 类型。如需将一个值显式指定为 Float 类型，请添加 f 或 F 后缀。如果这样的值包含多于 6～7 位十进制数，那么会将其舍入。\nval pi = 3.14 // Doubleval e = 2.7182818284 // Doubleval eFloat = 2.7182818284f // Float，实际值为 2.7182817\n\n请注意，与一些其他语言不同，Kotlin 中的数字没有隐式拓宽转换。例如，具有 Double 参数的函数只能对 Double 值调用，而不能对 Float、Int 或者其他数字值调用。\nfun main() &#123;    fun printDouble(d: Double) &#123; print(d) &#125;    val i = 1        val d = 1.1    val f = 1.1f     printDouble(d)//    printDouble(i) // 错误：类型不匹配//    printDouble(f) // 错误：类型不匹配&#125;\n\n如需将数值转换为不同的类型，请使用显示转换。\n字面常量数值常量字面值有以下几种:\n\n十进制: 123\nLong 类型用大写 L 标记: 123L\n\n\n十六进制: 0x0F\n二进制: 0b00001011\n\n注意: 不支持八进制\nKotlin 同样支持浮点数的常规表示方法:\n\n默认 double：123.5、123.5e10\nFloat 用 f 或者 F 标记: 123.5f\n\n数字字面值中的下划线（自 1.1 起）你可以使用下划线使数字常量更易读：\nval oneMillion = 1_000_000val creditCardNumber = 1234_5678_9012_3456Lval socialSecurityNumber = 999_99_9999Lval hexBytes = 0xFF_EC_DE_5Eval bytes = 0b11010010_01101001_10010100_10010010\n\n表示方式在 Java 平台数字是物理存储为 JVM 的原生类型，除非我们需要一个可空的引用（如 Int?）或泛型。后者情况下会把数字装箱。\n注意数字装箱不一定保留同一性:\nfun main() &#123;    val a: Int = 100    val boxedA: Int? = a    val anotherBoxedA: Int? = a        val b: Int = 10000    val boxedB: Int? = b    val anotherBoxedB: Int? = b        println(boxedA === anotherBoxedA) // true    println(boxedB === anotherBoxedB) // false&#125;\n\n另一方面，它保留了相等性:\nfun main() &#123;    val a: Int = 10000    println(a == a) // 输出“true”    val boxedA: Int? = a    val anotherBoxedA: Int? = a    println(boxedA == anotherBoxedA) // 输出“true”&#125;\n\n显式转换由于不同的表示方式，较小类型并不是较大类型的子类型。如果它们是的话，就会出现下述问题：\n// 假想的代码，实际上并不能编译：val a: Int? = 1 // 一个装箱的 Int (java.lang.Integer)val b: Long? = a // 隐式转换产生一个装箱的 Long (java.lang.Long)print(b == a) // 惊！这将输出“false”鉴于 Long 的 equals() 会检测另一个是否也为 Long\n\n所以相等性会在所有地方悄无声息地失去，更别说同一性了。\n因此较小的类型不能隐式转换为较大的类型。这意味着在不进行显式转换的情况下我们不能把 Byte 型值赋给一个 Int 变量。\nfun main() &#123;    val b: Byte = 1 // OK, 字面值是静态检测的    val i: Int = b // 错误&#125;\n\n我们可以显式转换来拓宽数字\nfun main() &#123;    val b: Byte = 1    val i: Int = b.toInt() // OK：显式拓宽    print(i)&#125;\n\n每个数字类型支持如下的转换:\n\ntoByte(): Byte\ntoShort(): Short\ntoInt(): Int\ntoLong(): Long\ntoFloat(): Float\ntoDouble(): Double\ntoChar(): Char\n\n缺乏隐式类型转换很少会引起注意，因为类型会从上下文推断出来，而算术运算会有重载做适当转换，例如：\nval l = 1L + 3 // Long + Int =&gt; Long\n\n运算Kotlin支持数字运算的标准集（+ - * / %），运算被定义为相应的类成员（但编译器会将函数调用优化为相应的指令）。参见运算符重载。\n整数除法请注意，整数间的除法总是返回整数。会丢弃任何小数部分。例如：\nfun main() &#123;    val x = 5 / 2    //println(x == 2.5) // ERROR: Operator &#x27;==&#x27; cannot be applied to &#x27;Int&#x27; and &#x27;Double&#x27;    println(x == 2)&#125;\n\n对于任何两个整数类型之间的除法来说都是如此。\nfun main() &#123;    val x = 5L / 2    println(x == 2L)&#125;\n\n如需返回浮点类型，请将其中的一个参数显式转换为浮点类型。\nfun main() &#123;    val x = 5 / 2.toDouble()    println(x == 2.5)&#125;\n\n位运算对于位运算，没有特殊字符来表示，而只可用中缀方式调用具名函数，例如:\nval x = (1 shl 2) and 0x000FF000\n\n这是完整的位运算列表（只用于 Int 与 Long）：\n\nshl(bits) – 有符号左移\nshr(bits) – 有符号右移\nushr(bits) – 无符号右移\nand(bits) – 位与\nor(bits) – 位或\nxor(bits) – 位异或\ninv() – 位非\n\n浮点数比较本节讨论的浮点数操作如下：\n\n相等性检测：a == b 与 a != b\n比较操作符：a &lt; b、 a &gt; b、 a &lt;= b、 a &gt;= b\n区间实例以及区间检测：a..b、 x in a..b、 x !in a..b\n\n当其中的操作数 a 与 b 都是静态已知的 Float 或 Double 或者它们对应的可空类型（声明为该类型，或者推断为该类型，或者智能类型转换的结果是该类型），两数字所形成的操作或者区间遵循 IEEE 754 浮点运算标准。\n然而，为了支持泛型场景并提供全序支持，当这些操作数并非静态类型为浮点数（例如是 Any、 Comparable&lt;……&gt;、 类型参数）时，这些操作使用为 Float 与 Double 实现的不符合标准的 equals 与 compareTo，这会出现：\n\n认为 NaN 与其自身相等\n认为 NaN 比包括正无穷大（POSITIVE_INFINITY）在内的任何其他元素都大\n认为 -0.0 小于 0.0\n\n字符字符用 Char 类型表示。它们不能直接当作数字\nfun check(c: Char) &#123;    if (c == 1) &#123; // 错误：类型不兼容        // ……    &#125;&#125;\n\n字符字面值用单引号括起来: &#39;1&#39;。特殊字符可以用反斜杠转义。支持这几个转义序列：\\t、 \\b、\\n、\\r、\\&#39;、\\&quot;、\\\\ 与 \\$。编码其他字符要用 Unicode 转义序列语法：&#39;\\uFF00&#39;。\n我们可以显式把字符转换为 Int 数字：\nfun decimalDigitValue(c: Char): Int &#123;    if (c !in &#x27;0&#x27;..&#x27;9&#x27;)        throw IllegalArgumentException(&quot;Out of range&quot;)    return c.toInt() - &#x27;0&#x27;.toInt() // 显式转换为数字&#125;\n\n当需要可空引用时，像数字、字符会被装箱。装箱操作不会保留同一性。\n布尔布尔用 Boolean 类型表示，它有两个值：true{: .keyword } 与 false{: .keyword }。\n若需要可空引用布尔会被装箱。\n内置的布尔运算有：\n\n|| – 短路逻辑或\n&amp;&amp; – 短路逻辑与\n! - 逻辑非\n\n数组数组在 Kotlin 中使用 Array 类来表示，它定义了 get 与 set 函数（按照运算符重载约定这会转变为 []）以及 size 属性，以及一些其他有用的成员函数：\nclass Array&lt;T&gt; private constructor() &#123;    val size: Int    operator fun get(index: Int): T    operator fun set(index: Int, value: T): Unit    operator fun iterator(): Iterator&lt;T&gt;    // ……&#125;\n\n我们可以使用库函数 arrayOf() 来创建一个数组并传递元素值给它，这样 arrayOf(1, 2, 3) 创建了 array [1, 2, 3]。或者，库函数 arrayOfNulls() 可以用于创建一个指定大小的、所有元素都为空的数组。\n另一个选项是用接受数组大小以及一个函数参数的 Array 构造函数，用作参数的函数能够返回给定索引的每个元素初始值：\nfun main() &#123;    // 创建一个 Array&lt;String&gt; 初始化为 [&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, &quot;16&quot;]    val asc = Array(5) &#123; i -&gt; (i * i).toString() &#125;    asc.forEach &#123; println(it) &#125;&#125;\n\n如上所述，[] 运算符代表调用成员函数 get() 与 set()。\nKotlin 中数组是不型变的（invariant）。这意味着 Kotlin 不让我们把 Array&lt;String&gt;赋值给 Array&lt;Any&gt;，以防止可能的运行时失败（但是你可以使用 Array&lt;out Any&gt;,参见类型投影）。\n原生类型数组Kotlin 也有无装箱开销的专门的类来表示原生类型数组: ByteArray、ShortArray、IntArray 等等。这些类与 Array 并没有继承关系，但是它们有同样的方法属性集。它们也都有相应的工厂方法:\nval x: IntArray = intArrayOf(1, 2, 3)x[0] = x[1] + x[2]\n\n// 大小为 5、值为 [0, 0, 0, 0, 0] 的整型数组val arr = IntArray(5)// 例如：用常量初始化数组中的值// 大小为 5、值为 [42, 42, 42, 42, 42] 的整型数组val arr = IntArray(5) &#123; 42 &#125;// 例如：使用 lambda 表达式初始化数组中的值// 大小为 5、值为 [0, 1, 2, 3, 4] 的整型数组（值初始化为其索引值）var arr = IntArray(5) &#123; it * 1 &#125; \n\n\n无符号整型\n无符号类型自 Kotlin 1.3 起才可用，并且目前是实验性的。详见下文{:.note}\n\nKotlin 为无符号整数引入了以下类型：\n\nkotlin.UByte: 无符号 8 比特整数，范围是 0 到 255\nkotlin.UShort: 无符号 16 比特整数，范围是 0 到 65535\nkotlin.UInt: 无符号 32 比特整数，范围是 0 到 2^32 - 1\nkotlin.ULong: 无符号 64 比特整数，范围是 0 到 2^64 - 1\n\n无符号类型支持其对应有符号类型的大多数操作。\n\n请注意，将类型从无符号类型更改为对应的有符号类型（反之亦然）是二进制不兼容变更{:.note}\n\n无符号类型是使用另一个实验性特性（即内联类）实现的。\n特化的类与原生类型相同，每个无符号类型都有相应的为该类型特化的表示数组的类型：\n\nkotlin.UByteArray: 无符号字节数组\nkotlin.UShortArray: 无符号短整型数组\nkotlin.UIntArray: 无符号整型数组\nkotlin.ULongArray: 无符号长整型数组\n\n与有符号整型数组一样，它们提供了类似于 Array 类的 API 而没有装箱开销。\n此外，区间与数列也支持 UInt 与 ULong（通过这些类 kotlin.ranges.UIntRange、 kotlin.ranges.UIntProgression、 kotlin.ranges.ULongRange、 kotlin.ranges.ULongProgression）\n字面值为使无符号整型更易于使用，Kotlin 提供了用后缀标记整型字面值来表示指定无符号类型（类似于 Float&#x2F;Long）：\n\n后缀 u 与 U 将字面值标记为无符号。确切类型会根据预期类型确定。如果没有提供预期的类型，会根据字面值大小选择 UInt 或者 ULong\n\nval b: UByte = 1u  // UByte，已提供预期类型val s: UShort = 1u // UShort，已提供预期类型val l: ULong = 1u  // ULong，已提供预期类型val a1 = 42u // UInt：未提供预期类型，常量适于 UIntval a2 = 0xFFFF_FFFF_FFFFu // ULong：未提供预期类型，常量不适于 UInt\n\n\n后缀 uL 与 UL 显式将字面值标记为无符号长整型。\n\nval a = 1UL // ULong，即使未提供预期类型并且常量适于 UInt\n\n无符号整型的实验性状态无符号类型的设计是实验性的，这意味着这个特性改进很快并且没有给出兼容性保证。当在 Kotlin 1.3+ 中使用无符号算术时，会报出警告表明这个特性是实验性的。如需移除警告，必须选择加入（opt-in）无符号类型的实验性使用。\n选择加入无符号整型有两种可行的方式：将 API 标记为实验性的，或者无需标记。\n\n如需传播实验性，请以 @ExperimentalUnsignedTypes 标注使用了无符号整型的声明。\n如需选择加入而不传播实验性，要么使用 @OptIn(ExperimentalUnsignedTypes::class) 注解标注声明，要么将 -Xopt-in=kotlin.ExperimentalUnsignedTypes 传给编译器。\n\n你的客户是否必须选择使用你的 API 取决于你，不过请记住，无符号整型是一个实验性特性，因此使用它们的 API 可能会因语言的变更而发生突然破坏。\n技术细节也参见实验性 API KEEP。\n深入探讨关于技术细节与深入探讨请参见无符号类型的语言提案。\n字符串字符串用 String 类型表示。字符串是不可变的。字符串的元素——字符可以使用索引运算符访问: s[i]。可以用 for{: .keyword } 循环迭代字符串:\nfun main() &#123;    val str = &quot;abcd&quot;    for (c in str) &#123;        println(c)    &#125;&#125;\n\n可以用 + 操作符连接字符串。这也适用于连接字符串与其他类型的值，只要表达式中的第一个元素是字符串：\nfun main() &#123;val s = &quot;abc&quot; + 1println(s + &quot;def&quot;)&#125;\n\n请注意，在大多数情况下，优先使用字符串模板或原始字符串而不是字符串连接。\n字符串字面值Kotlin 有两种类型的字符串字面值: 转义字符串可以有转义字符，以及原始字符串可以包含换行以及任意文本。以下是转义字符串的一个示例:\nval s = &quot;Hello, world!\\n&quot;\n\n转义采用传统的反斜杠方式。参见上面的 字符 查看支持的转义序列。\n原始字符串 使用三个引号（&quot;&quot;&quot;）分界符括起来，内部没有转义并且可以包含换行以及任何其他字符:\nval text = &quot;&quot;&quot;    for (c in &quot;foo&quot;)        print(c)&quot;&quot;&quot;\n\n你可以通过 trimMargin() 函数去除前导空格：\nval text = &quot;&quot;&quot;    |Tell me and I forget.    |Teach me and I remember.    |Involve me and I learn.    |(Benjamin Franklin)    &quot;&quot;&quot;.trimMargin()\n\n默认 | 用作边界前缀，但你可以选择其他字符并作为参数传入，比如 trimMargin(&quot;&gt;&quot;)。\n字符串模板字符串字面值可以包含模板表达式 ，即一些小段代码，会求值并把结果合并到字符串中。模板表达式以美元符（$）开头，由一个简单的名字构成:\nfun main() &#123;    val i = 10    println(&quot;i = $i&quot;) // 输出“i = 10”&#125;\n\n或者用花括号括起来的任意表达式:\nfun main() &#123;    val s = &quot;abc&quot;    println(&quot;$s.length is $&#123;s.length&#125;&quot;) // 输出“abc.length is 3”&#125;\n\n原始字符串与转义字符串内部都支持模板。如果你需要在原始字符串中表示字面值 $ 字符（它不支持反斜杠转义），你可以用下列语法：\nval price = &quot;&quot;&quot;$&#123;&#x27;$&#x27;&#125;9.99&quot;&quot;&quot;\n"},{"title":"Markdown 教程","url":"/and.io/2020/04/15/markdown/","content":"\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 .md, .markdown。\n\n\n\n标题👆 看起来就像上面这个。Markdown 标题有两种格式。\n使用 = 和 - 标记一级和二级标题= 和 - 标记语法格式如下：\n我展示的是一级标题=================我展示的是二级标题-----------------\n\n使用 # 号标记使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n\n段落样式Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。当然也可以在段落后面使用一个空行来表示重新开始一个段落。\n字体Markdown 可以使用以下几种字体：\n\n斜体文本粗体文本粗斜体文本\n\n*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___\n\n分隔线可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n\n\n我\n\n裂\n\n开\n\n了\n\n\n**** * ******- - -----------\n\n删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n\nRUNOOB.COMGOOGLE.COMBAIDU.COM\n\nRUNOOB.COMGOOGLE.COM~~BAIDU.COM~~\n\n下划线下划线可以通过 HTML 的 &lt;u&gt; 标签来实现：\n\n带下划线文本\n\n&lt;u&gt;带下划线文本&lt;/u&gt;\n\n脚注脚注是对文本的补充说明。Markdown 脚注的格式如下:\n[^要注明的文本]\n以下实例演示了脚注的用法：\n\n阿米娅^阿米娅\n\n创建脚注格式类似这样 [^阿米娅][^阿米娅]: 博士，您还有很多事情需要处理。现在还不能休息哦。\n\nMarkdown 列表Markdown 支持有序列表和无序列表。无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：\n\n\n第一项\n第二项\n第三项\n\n\n* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项\n有序列表使用数字并加上 . 号来表示，如：\n\n\n第一项\n第二项\n第三项\n\n\n1. 第一项2. 第二项3. 第三项\n\n列表嵌套列表嵌套只需在子列表中的选项添加四个空格即可：\n\n第一项：\n第一项嵌套的第一个元素\n第一项嵌套的第二个元素\n\n\n第二项：\n第二项嵌套的第一个元素\n第二项嵌套的第二个元素\n\n\n\n1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素\n\nMarkdown 区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：\n\n这是一个区块\n\n&gt; 这是一个区块\n另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：\n\n最外层\n\n第一层嵌套\n\n第二层嵌套\n\n\n\n&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套\n\n区块中使用列表区块中使用列表实例如下：\n\n区块中使用列表\n\n第一项\n第二项\n\n\n第一项\n第二项\n第三项\n\n\n&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项\n\n列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。区块中使用列表实例如下：\n\n第一项\n菜鸟教程学的不仅是技术更是梦想\n\n\n第二项* 第一项    &gt; 菜鸟教程    &gt; 学的不仅是技术更是梦想* 第二项\n\nMarkdown 代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：printf() 函数\n`printf()` 函数\n代码区块代码区块使用 4 个空格或者一个制表符（Tab 键）。也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）：实例如下：\n$(document).ready(function () &#123;    alert(&#x27;RUNOOB&#x27;);&#125;);\n\nMarkdown 链接链接使用方法如下：\n\n链接名称或者直接使用链接地址https://github.com/Yue-plus\n\n[链接名称](链接地址)&lt;https://github.com/Yue-plus&gt;\n\n高级链接可以通过变量来设置一个链接，变量赋值在文档末尾进行：\n\n这个链接用 1 作为网址变量 Google这个链接用 mysite 作为网址变量 Yue_plus\n\n这个链接用 1 作为网址变量 [Google][1]这个链接用 mysite 作为网址变量 [Yue_plus][mysite]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [mysite]: https://github.com/Yue-plus\n\nMarkdown 图片Markdown 图片语法格式如下：\n![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)\n开头一个感叹号 !接着一个方括号，里面放上图片的替代文字接着一个英文括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。\n\n\n\n![罗德岛集结](https://ak.hypergryph.com/upload/images/20190228/118078295785f64dac736c6ade50bb76.jpg &quot;罗德岛集结&quot;)\n当然，你也可以像网址那样对图片网址使用变量:\n这个链接用 `2` 作为网址变量 [凯尔希][2].然后在文档的结尾为变量赋值（网址）[2]: https://ak.hypergryph.com/upload/images/20190228/143666074a406ecaa6cd4271dc7c5127.jpg\nMarkdown 还没有办法指定图片的高度与宽度，如果需要的话，也可以使用普通的 &lt;img&gt; 标签。\n\n\n&lt;img src=&quot;https://ak.hypergryph.com/assets/index/images/ak/common/story/item_infected.png&quot; width=&quot;200px&quot;&gt;\n\nMarkdown 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。语法格式如下：\n\n\n\n表头\n表头\n\n\n\n单元格\n单元格\n\n\n单元格\n单元格\n\n\n|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |\n\n可以设置表格的对齐方式：\n-: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。\n\n\n\n左对齐\n右对齐\n居中对齐\n\n\n\n单元格\n单元格\n单元格\n\n\n单元格\n单元格\n单元格\n\n\nMarkdown 高级技巧##支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等，如：\n\n使用 Ctrl+Alt+Del 重启电脑\n\n使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑\n\n转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n\n** 正常显示星号 **\n\n**文本加粗** \\*\\* 正常显示星号 \\*\\*\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\\   反斜线`   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号\n\n数学公式当需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n参考 使用 hexo-filter-mathjax 过滤器来显示数学公式\n\n\n可以在行内包含数学公式： $i\\hbar\\frac{\\partial}{\\partial t}\\psi&#x3D;-\\frac{\\hbar^2}{2m}\\nabla^2\\psi+V\\psi$ 注意单 $ 内部不能有空格！$$\\begin{eqnarray*}\\nabla\\cdot\\vec{E}&amp;&#x3D;&amp;\\frac{\\rho}{\\epsilon_0}\\\\\\nabla\\cdot\\vec{B}&amp;&#x3D;&amp;0\\\\\\nabla\\times\\vec{E}&amp;&#x3D;&amp;-\\frac{\\partial B}{\\partial t}\\\\\\nabla\\times\\vec{B}&amp;&#x3D;&amp;\\mu_0\\left(\\vec{J}+\\epsilon_0\\frac{\\partial E}{\\partial t}\\right)\\\\\\end{eqnarray*}$$\n\n可以在行内包含数学公式： $i\\hbar\\frac&#123;\\partial&#125;&#123;\\partial t&#125;\\psi=-\\frac&#123;\\hbar^2&#125;&#123;2m&#125;\\nabla^2\\psi+V\\psi$ 注意单 `$` 内部不能有空格！$$\\begin&#123;eqnarray\\*&#125;\\nabla\\cdot\\vec&#123;E&#125;&amp;=&amp;\\frac&#123;\\rho&#125;&#123;\\epsilon_0&#125;\\\\\\\\\\nabla\\cdot\\vec&#123;B&#125;&amp;=&amp;0\\\\\\\\\\nabla\\times\\vec&#123;E&#125;&amp;=&amp;-\\frac&#123;\\partial B&#125;&#123;\\partial t&#125;\\\\\\\\\\nabla\\times\\vec&#123;B&#125;&amp;=&amp;\\mu_0\\left(\\vec&#123;J&#125;+\\epsilon_0\\frac&#123;\\partial E&#125;&#123;\\partial t&#125;\\right)\\\\\\\\\\end&#123;eqnarray\\*&#125;$$\n\n","categories":["教程"],"tags":["Markdown"]},{"title":"miku","url":"/and.io/2024/12/27/miku/","content":"\n      \n        28d89fa048054729c3e448ede6cb01caf90219158f152523085215eea35e099eb9e3659f7f65d7d51d693dfc0b92c6a12eacad2477a38c543e784ed37d44723b02baacf4f9362d95dca39cdba20838afea1272204d508e31e2373fd8e0c65076e46481af9cd8c8e92be3694f2e889a1b482200cab2a12f60509ff3d1294ef5c348493c00e6448c79ef9e69811ea018d695a9e340c0ec035e331dcb6ce655229b49c0db4d10c5772c9765dc41a5aa49cef15b932bdc4cb0007b0951e40ca7c1daa5459828c386e8445ba97fb0876ceab4631a25ddd75fd512ca5ffcb003d03f602c668f47a7f05a0a5fc1014b095d572821d328781b037bd23ee81ec647c7f5be238e6044bde2c65bb4e41249d1a44622fd0ae20ad9ca6c42aa662349f4a36369dc0a62ea3f39ad22778fed29155376cd614a355b4d407ba9686a8f055fbce82728e1f656bbbdafd60ae7554fea4981710a39259a2d4312b14e53b79c98fdc390933bcaa79842375f9961749f584ab01c6a8aafb37a038e86beb77b1ac0690cc37db2300275d11938257f72eb9f71be565cb9bbbff577125c10d6921c63cb1bbf993b0675d5dd229223ff0b246de8fead6af4cf2b98e2892922eb190e273c2ebe50bcdc2c5912c094ed09e4c226712d5f558bf67d2f7cc8f3d379286036e654648956f1ee2bd2d3e3ee0625d22064d2b42e823d39c6b2840374be968df4a0e254f8195e2dbc8831b503c32b0379af49c6618c1148080bf03e0a50d3dded8a85e3da8d06c0661c4e9bf53a31036d9b7fe8d94df94df6f60ddcbf437e0c5023c284df094c75c6336456bc798853e8efb253413d374e68369f9fb5209662bf84bd47e3b6b26baa344a62d23a9074cfe8ff963f4a6ffb9237260c3b9891979ca196b65b056cedd7ef2b5ebc7e6e23320935af94936a73e8c8d4e658b31294abf55f5dcc2f3a274c968f58aa7e8bbdc141411f21a662dc87d7655e6125bf2898813f7b3a3721c68d42e550301a24b2010de5a8effc251d5f75811447e28052c87376f32ea5e76c9ce1d122873cd398f7b35c9dac28f28fdb707af7cb523d6eb59ba4fa26e63766840a1a1cd1d3e324cd869f3d2c5d70220e07fdee3557ec6ee1c94e66f7444e12925d6bd0144222f9506bea9ca410ae27e990e7cf6e89ab2d46780e9b5f039de83505bdb0e040cd0675db1ae0bc54272dbdd88e0d08b04d32c6a1a1361452409e2e958cadcca91dc675d4454c0faf8822e86acab9e0f5d629b5d9f614b033adc81e92b8efb8079c131666d756edd28500d9fab35234ab6a7b6d60b6479df6bf4c77cef0c32dba48c14249b40c64e57dc17b5dfef0f0c624708ee501c45cc1dc5d4a673dd0db49437dc5592484d7ccf7c317dce046e82d9affb1b3a87a9b3a1c8e7ca2c744168f4dd2c9468d8e397a61564fd2068a991bb249689a5c0d80b783edaa01a4405f1f605d2be9942f900e00d2fbd05d10ccbffda6250feb363f657b0126bd089897f0913da5e4410a9aa9a47f9080bcbd7392adee638afc4c6aa41c7e3b526d53da873b1ea55a5fbcb175691c204438154d9598c4ab365a14f55ead0567ffc0bbb9f061fa98b28e71d3cb5ea3482c369397b7e71e6913cefe38edca4c60ade6932b94d137c9e4d243ac264017d496c58919ef4678dcf9197f9232665e44af2b4a6f800c7884d4fe3edfd0984a758f6f5984beea94780b7b125d3a84fd586b8102ebc9a3aca0c862d8a3c1a33ad1f72667190df6350de4f2bef70ea2ebd695abb9e712f3eeb032e32a1d8791940587981926fda03e2375561f0f6838ebbd9b5e218d4dc7bb648f48f059c6370a34d4d9d78b02c2441d6091c2e2086559be2bdfd8849f08c56caf1cf2a2d627cb40036bc921be4e8bbeaa1ab0b4a4857a638c1c47baa44d22a6158ac2a9d3aa99fd1b517d714d1049adaaceacad2a5a976c474b27f67803112f188eae8e5b7ab4011baf4ef3217c9f9284d56aed0d4c2d13e13fb56205b62aa202d405d9c8674e7a4d25d461b1ec59a83d34f84c4595b3b192f9c00a5f31fadde72702151c97081c1b6e5b766418c8c8a3bdf256bd9032769518545dac6f55803c0cd82cd858289ab8e413f8126679099f2f52b1dea3c729c279c2a0ff8bee276376ae7929c5c70d34117cc88a9462f5cf59e784988132f069b5e40a6830e9caf2af02ac3770f5c9f13018d5e96029b34cd43fba7d9326cddb9e91a6516790e749a498311757f89797cf303c92bc5f5ff8dd408f8cfcb5b41a1805b6c8815c39463f7cb2be82e2163c6a0c4a7a5bc3caa52d1d54c7f6ee7e5024a3a33496de6295f6ed\n      \n      \n        \n          \n          \n            Hey, password is required here.\n          \n        \n        \n      \n    \n    ","categories":["miku"],"tags":["miku"]},{"title":"Unix 时间","url":"/and.io/1970/01/01/unixtime/","content":"UNIX时间，或称POSIX时间是UNIX或类UNIX系统使用的时间表示方式：从UTC1970年1月1日0时0分0秒起至现在的总秒数，不考虑闰秒。在多数Unix系统上Unix时间可以透过date +%s指令来检查。\n\n"},{"title":"加密文档（密码：4）","url":"/and.io/2099/12/01/%E5%9C%B0%E5%B9%B3%E7%BA%BF4/","content":"\n      \n        bb8111e83736292791f6d3dc7281986f24880223879005e12490c575b9926244d1b5c562bb5bf283f1321f230e3e799ca97ec3dba79bdd7b18b187bf8ba505d48b63a8ba898134b1f3d1449b223b2260316e5088316f1a613cec9cba19403fcb690d50bb4be6d237541f07a2d05f7423009f3b410d8735089da575aeecdf771e20096670cde7929ddea230b974176a821654b2cd3609b5579b4fe89bdc44b15bac9f78b8429bb5fefaa1b9368ae9f55099583e8279ed3090dc14ae0266726b6ecc25179c5cd2e7d6d8fc1b1b93baf1edc0769664987fa6511d487668515db550862f972ff2246a530e5245d387a73ba0\n      \n      \n        \n          \n          \n            Hey, password is required here.\n          \n        \n        \n      \n    \n    ","categories":["赛车"],"tags":["赛车"]},{"title":"[活动预告]主题曲【破碎日冕】开放，纪念活动开启","url":"/and.io//news/","content":"\n\n\n一、全新活动SideStory「绿野幻梦」，活动关卡开启活动说明： 活动期间将开放「绿野幻梦」活动关卡，玩家可通过活动关卡作战、完成相关活动任务以及活动商店兑换获取相关活动奖励\n解锁条件： 通关主线1-10\n活动关卡将进行分段式开启：\n◆“实验基地”开启时间： 07月05日 16:00 - 07月19日 03:59\n◆“莱茵总部”开启时间： 07月12日 16:00 - 07月19日 03:59\n\n【数据采集】\n活动说明： 活动期间，玩家可通过活动关卡作战完成“数据采集”中相关任务获取奖励\n主要奖励： 活动干员 【★★★★★：星源】 、 【莱茵实验培养舱】家具（部分） 、 神秘试剂\n【危险物品回收处】\n开放时间： 07月05日 16:00 - 07月26日 03:59\n兑换说明： 活动期间，玩家可通过挑战活动关卡及【数据采集】获取「神秘试剂」，消耗「神秘试剂」来兑换【危险物品回收处】中物品\n主要物品： 【星源】信物 、 【莱茵实验培养舱】家具（部分） 、寻访凭证、高级养成素材、龙门币、作战记录、家具零件等\n◆本次活动期间【情报处理室】将无法浏览当期活动剧情，活动结束后该活动剧情将收录至【情报处理室】中 \n\n二、【沙洲引路人】限时寻访开启活动时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间【沙洲引路人】限时寻访开启，该寻访中以下干员出现率上升\n★★★★★★：多萝西（占6★出率的50%）\n★★★★★：承曦格雷伊 &#x2F; 白面鸮（占5★出率的50%）\n注意： 本次活动【沙洲引路人】寻访为【标准寻访】\n\n三、新干员登场，信赖获取提升新增干员：\n★★★★★★：多萝西\n★★★★★：承曦格雷伊\n★★★★★：星源\n注意：\n◆新增干员【星源】仅在本次「绿野幻梦」活动中获取。暂不加入【沙洲引路人】及任何【标准寻访】\n◆新增干员【多萝西】、【承曦格雷伊】除加入【沙洲引路人】寻访外，将在07月07日04:00后加入并常驻其余【标准寻访】卡池\n◆本次活动关卡内以上新增干员信赖获取提升\n\n四、【珊瑚海岸】系列，新装限时上架贩售时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间以下干员新增时装将在时装商店上架并进行限时贩售\n◆珊瑚海岸系列 - “灿阳朝露 SD08” - 卡涅利安\n◆珊瑚海岸系列 - “悠然假日 HDm04” - 炎客\n◆珊瑚海岸系列 - “夏卉 FA641” - 夜半\n\n五、【时代】系列，复刻时装限时上架贩售时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间以下干员时装将在时装商店复刻上架并进行限时贩售\n◆时代系列 - “白沙” - 蜜蜡\n◆时代系列 - “伦式巫女” - 月禾\n◆时代系列 - “闲适午后” - 调香师\n\n六、新增【莱茵实验培养舱】主题家具，限时获取活动说明： 活动期间新增活动限定家具【莱茵实验培养舱】系列\n** 获取方式：**\n◆SideStory「绿野幻梦」活动奖励及兑换（部分）\n◆家具商店限时售卖（部分）：07月05日 16:00 - 07月19日 03:59\n\n七、芯片礼包限时上架售卖时间： 07月05日 16:00 - 07月19日 03:59\n活动说明： 活动期间，采购中心将限时售卖以下组合包\n[沙洲引路人芯片礼包]\n组合包内容：特种芯片组*8、特种芯片*5、龙门币*210000\n\n八、剿灭作战关卡【盘桓蜀道】追加开启时间： 07月11日 04:00 - 09月05日 03:59\n开启条件： 所有通关主线2-8的玩家\n关卡说明： 新增剿灭委托关卡【盘桓蜀道】将替换现有剿灭委托关卡【黑夜锦标秀】，现剿灭委托关卡【黑夜锦标秀】将在关闭后收录进假定作战目标\n更多活动内容请持续关注《明日方舟》游戏内公告及官方公告。\n【明日方舟】运营组2022年06月29日\n","categories":["活动"],"tags":["Arknights"]},{"title":"撒旦","url":"/and.io/2024/12/27/%E6%B5%8B%E8%AF%95%202/","content":"\n      \n        6a135677ce65ba44ce01a612d0734a23d6ffef312a58181d53bfb3858b450610eca2ccd1b6ae74b3eefbc62fa6a120b62d08d809bb4f07ad66f538beae8aae325ad763f0dcb0d3040dda3734ca589e30cee4837f822dc239f36ccb450928f763989f65fda43b5d7d3dc81a27ac078842a34610cc3bfd7e34566c8ac597f7b788ec803e54f502f571e69ed9df7bdd2478e2b736ac3d5eb39c6df2d7491fb2c64e7d8422fea03eebbc05d609176af229112e7c44a33389cc78a5149d942bdaa9915ae90a3f38b511715668763eba23cce6d7d790b4ca9ca011a41e92aa9876e8260aa0628f0f1b6ffc836ea678f9a154a6\n      \n      \n        \n          \n          \n            Hey, password is required here.\n          \n        \n        \n      \n    \n    ","categories":["测试"],"tags":["测试"]},{"title":"空","url":"/and.io/2024/12/02/%E6%B5%8B%E8%AF%953/","content":"\n      \n        a980abe646232092407c0984e4464a177be04536a9ce0f50f37cd2b54ebf8ab005cdd74e2cdb27ee9d4c71dce074e694397f364d85716bab5342760b48ccf88592c16e28f96e78e73a905fea12876d76c6128378ffbc5656600350868f2756d664174b4120d24a4e8d6efeca71f2e9dcd8f7e888ab103e740e3a2ee412b17a188e5134578c6b7acd56bd41a9b507118a9f2c50bec2e8fcc687d4e7e59472618dd37edc6db279955bd42deff0b10548b0cbcd7413f37e3e308deb2dea0bd393ed3fc53248637b4b1613a86e41d1efd59580a474f0c053045b185ee0ec9be0390cd4bb561cb3e469dbe7f29bc85a15e5da\n      \n      \n        \n          \n          \n            Hey, password is required here.\n          \n        \n        \n      \n    \n    ","categories":["空"],"tags":["空"]}]